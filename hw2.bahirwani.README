(1)  For the file http://www.gutenberg.org/cache/epub/1342/pg1342.txt what is the depth of your tree?  What does that say about the number of operations to find a word?
The depth of the tree is 28, which means it would take atmost 28 operations to find any word in the tree.

(2)  What would happen if the input to your program were sorted (as it was in HW 1)?
It would be as good as a linear search, because eerything would be in a single chain to the right of the root

(3)  What are applications for binary search tree?  In what ways are they superior to lists?  In what ways are they inferior to lists?
As we did in this assignment, we can use binary search tree to store and retrieve data, also we can build dictionaries or phone directories using BST. They are superior to lists in that that in the case of unsorted random input, the time to search is far less (log base 2 of n, versus log n). They are inferior to lists in regard to that each node has to save information about its left and right child, which is an additional overhead.

(4)  Did you implement the extra credit (listed below)?  If so please explain your testing strategy on the extra credit.
No, I did not implement the extra credit.


Test case/strategy: I tried searching for various words from the book and checked their stats.